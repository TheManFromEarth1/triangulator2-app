{"version":3,"sources":["../../triangulator2/src/perlin.js","../../triangulator2/node_modules/.registry.npmjs.org/image-size/0.5.5/node_modules/image-size/lib/types sync /^/.*$","../../triangulator2/src/poissondisc.js","../../triangulator2/src/index.js","../../triangulator2/src/triangulator.js","App.jsx","index.js"],"names":["_classCallCheck","__webpack_require__","_createClass","fade","t","lerp","a","b","grad","hash","x","y","z","h","u","v","module","exports","PerlinNoise","rng","this","permutation","i","push","_i","randomIndex","Math","floor","temporaryValue","_i2","key","value","xi","yi","zi","X","Y","Z","w","A","AA","AB","B","BA","BB","map","./bmp","./bmp.js","./dds","./dds.js","./gif","./gif.js","./jpg","./jpg.js","./png","./png.js","./psd","./psd.js","./svg","./svg.js","./tiff","./tiff.js","./webp","./webp.js","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","width","height","radius","radius2","R","cellSize","SQRT1_2","gridWidth","ceil","gridHeight","grid","Array","queue","queueSize","sampleSize","far","j","i0","max","j0","i1","min","j1","dx","dy","sample","s","PI","r","sqrt","cos","sin","length","presets","default","__webpack_exports__","C_Users_Jack_W_dev_oss_triangulator2_app_node_modules_registry_npmjs_org_babel_runtime_7_4_3_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","seedrandom__WEBPACK_IMPORTED_MODULE_1__","seedrandom__WEBPACK_IMPORTED_MODULE_1___default","n","delaunator__WEBPACK_IMPORTED_MODULE_2__","object_hash__WEBPACK_IMPORTED_MODULE_3__","object_hash__WEBPACK_IMPORTED_MODULE_3___default","chroma_js__WEBPACK_IMPORTED_MODULE_4__","chroma_js__WEBPACK_IMPORTED_MODULE_4___default","svg_js__WEBPACK_IMPORTED_MODULE_5__","svg_js__WEBPACK_IMPORTED_MODULE_5___default","_poissondisc__WEBPACK_IMPORTED_MODULE_6__","_poissondisc__WEBPACK_IMPORTED_MODULE_6___default","_perlin__WEBPACK_IMPORTED_MODULE_7__","_perlin__WEBPACK_IMPORTED_MODULE_7___default","random","noiseGenerator","triangulator","pointCache","lastPointOptionsHash","GridMode","Square","Triangle","Poisson","Override","ColorFunction","Horizontal","Vertical","DiagonalFromLeft","DiagonalFromRight","RadialFromCenter","hypot","RadialFromBottom","FromEdges","edgeDist","Noise","sx","sy","noise","GradientFunction","Random","triangle","p2","vector","vectorAbs","abs","apply","gradientVector","gradientDirection","sign","generate","input","perfTest","arguments","undefined","c","console","time","options","isBrowser","svgInput","forceSVGSize","seed","gridMode","gridOverridde","cellRandomness","color","colorScaleInvert","colorPalette","colorRandomness","quantizeSteps","colorOverride","useGradient","gradient","gradientNegativeFactor","gradientPositiveFactor","strokeColor","strokeWidth","svg","concat","timeEnd","points","tris","pointOptionsHash","gridOverride","cellRandomnessLimit","_x","_y","nextPoint","delaunay","from","triangles","scale","mode","draw","size","normX","normY","colorIndex","round","_draw$gradient$from","_options$gradient","stop","at","hex","to","polygon","p","join","fill","stroke","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","svgNeedsUpdating","svgSizeCSS","svgWidth","svgHeight","svgString","imageData","imageWidth","imageHeight","Triangulator","allColorFunctions","toConsumableArray","entries","allGradientFunctions","inputHandler","_","debounce","handleOptionChange","bind","assertThisInitialized","HTMLCanvasElement","prototype","toBlob","defineProperty","callback","type","quality","dataURL","toDataURL","split","setTimeout","binStr","atob","len","arr","Uint8Array","charCodeAt","Blob","replace","target","updatedState","parseInt","step","parseFloat","log","setState","_this2","event","delta","_this3","newSize","chroma","colors","_this4","_this5","reader","FileReader","onload","sourceImage","Image","canvas","document","getElementById","ctx","getContext","drawImage","getImageData","data","src","result","readAsDataURL","files","element","innerHTML","objectSpread","windowAspect","clientWidth","clientHeight","stripStyles","canvg","blob","saveAs","Date","toISOString","_this6","react_default","createElement","Container","className","Row","Col","xs","lg","style","viewBox","ref","generateSVG","Form","href","FormGroup","Label","for","Input","bsSize","defaultValue","onChange","f","name","ButtonGroup","Button","onClick","handleToggle","active","handleChangeColorStops","lib","disableAlpha","onChangeComplete","handleColorChange","saveImage","saveSVG","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.44a8363a.chunk.js","sourcesContent":["var _classCallCheck = require(\"C:\\\\Users\\\\Jack W\\\\dev\\\\oss\\\\triangulator2-app\\\\node_modules\\\\.registry.npmjs.org\\\\@babel\\\\runtime\\\\7.4.3\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Jack W\\\\dev\\\\oss\\\\triangulator2-app\\\\node_modules\\\\.registry.npmjs.org\\\\@babel\\\\runtime\\\\7.4.3\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\n// 3D Perlin noise implementation\n// This code is in the public domain\nfunction fade(t) {\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\n\nfunction lerp(t, a, b) {\n  return a + t * (b - a);\n}\n\nfunction grad(hash, x, y, z) {\n  var h = hash & 15;\n  var u = h < 8 ? x : y;\n  var v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n  return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function PerlinNoise(rng) {\n    _classCallCheck(this, PerlinNoise);\n\n    this.permutation = [];\n\n    for (var i = 0; i < 256; i++) {\n      this.permutation.push(i);\n    }\n\n    for (var _i = 256; _i > 0; _i--) {\n      var randomIndex = Math.floor(rng() * _i);\n      var temporaryValue = this.permutation[_i - 1];\n      this.permutation[_i - 1] = this.permutation[randomIndex];\n      this.permutation[randomIndex] = temporaryValue;\n    }\n\n    for (var _i2 = 0; _i2 < 256; _i2++) {\n      this.permutation.push(this.permutation[_i2]);\n    }\n  }\n\n  _createClass(PerlinNoise, [{\n    key: \"noise\",\n    value: function noise(xi, yi, zi) {\n      var X = Math.floor(xi) & 255;\n      var Y = Math.floor(yi) & 255;\n      var Z = Math.floor(zi) & 255;\n      var x = xi - Math.floor(xi);\n      var y = yi - Math.floor(yi);\n      var z = zi - Math.floor(zi);\n      var u = fade(x);\n      var v = fade(y);\n      var w = fade(z);\n      var A = this.permutation[X] + Y;\n      var AA = this.permutation[A] + Z;\n      var AB = this.permutation[A + 1] + Z;\n      var B = this.permutation[X + 1] + Y;\n      var BA = this.permutation[B] + Z;\n      var BB = this.permutation[B + 1] + Z;\n      return lerp(w, lerp(v, lerp(u, grad(this.permutation[AA], x, y, z), grad(this.permutation[BA], x - 1, y, z)), lerp(u, grad(this.permutation[AB], x, y - 1, z), grad(this.permutation[BB], x - 1, y - 1, z))), lerp(v, lerp(u, grad(this.permutation[AA + 1], x, y, z - 1), grad(this.permutation[BA + 1], x - 1, y, z - 1)), lerp(u, grad(this.permutation[AB + 1], x, y - 1, z - 1), grad(this.permutation[BB + 1], x - 1, y - 1, z - 1)))) + 0.5;\n    }\n  }]);\n\n  return PerlinNoise;\n}();","var map = {\n\t\"./bmp\": 224,\n\t\"./bmp.js\": 224,\n\t\"./dds\": 225,\n\t\"./dds.js\": 225,\n\t\"./gif\": 226,\n\t\"./gif.js\": 226,\n\t\"./jpg\": 227,\n\t\"./jpg.js\": 227,\n\t\"./png\": 228,\n\t\"./png.js\": 228,\n\t\"./psd\": 229,\n\t\"./psd.js\": 229,\n\t\"./svg\": 230,\n\t\"./svg.js\": 230,\n\t\"./tiff\": 231,\n\t\"./tiff.js\": 231,\n\t\"./webp\": 232,\n\t\"./webp.js\": 232\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 223;","// Iterative Poisson disc sampler\n// Based on this implementation: https://www.jasondavies.com/poisson-disc/\n// This code is in the public domain\nmodule.exports = function IterativePoissonDiscSampler(width, height, radius, rng) {\n  var k = 30; // Maximum number of samples before rejection\n\n  var radius2 = radius * radius;\n  var R = 3 * radius2;\n  var cellSize = radius * Math.SQRT1_2;\n  var gridWidth = Math.ceil(width / cellSize);\n  var gridHeight = Math.ceil(height / cellSize);\n  var grid = new Array(gridWidth * gridHeight);\n  var queue = [];\n  var queueSize = 0;\n  var sampleSize = 0;\n\n  function far(x, y) {\n    var i = Math.floor(x / cellSize);\n    var j = Math.floor(y / cellSize);\n    var i0 = Math.max(i - 2, 0);\n    var j0 = Math.max(j - 2, 0);\n    var i1 = Math.min(i + 3, gridWidth);\n    var j1 = Math.min(j + 3, gridHeight);\n\n    for (j = j0; j < j1; ++j) {\n      var o = j * gridWidth;\n\n      for (i = i0; i < i1; ++i) {\n        if (grid[o + i]) {\n          var dx = grid[o + i][0] - x;\n          var dy = grid[o + i][1] - y;\n          if (dx * dx + dy * dy < radius2) return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function sample(x, y) {\n    var s = [x, y];\n    queue.push(s);\n    grid[gridWidth * Math.floor(y / cellSize) + Math.floor(x / cellSize)] = s;\n    sampleSize++;\n    queueSize++;\n    return s;\n  }\n\n  return function iterate() {\n    // Pick a random point for the first sample\n    if (!sampleSize) return sample(rng() * width, rng() * height); // Pick a random existing sample and remove it from the queue.\n\n    while (queueSize) {\n      var i = Math.floor(rng() * queueSize); // Make a new candidate between [radius, 2 * radius] from the existing sample.\n\n      for (var j = 0; j < k; ++j) {\n        var a = 2 * Math.PI * rng();\n        var r = Math.sqrt(rng() * R + radius2);\n        var x = queue[i][0] + r * Math.cos(a);\n        var y = queue[i][1] + r * Math.sin(a); // Reject candidates that are outside the allowed extent,\n        // or closer than 2 * radius to any existing sample.\n\n        if (x >= 0 && x < width && y >= 0 && y < height && far(x, y)) return sample(x, y);\n      }\n\n      queue[i] = queue[--queueSize];\n      queue.length = queueSize;\n    }\n\n    return false;\n  };\n};","require('@babel/register')({\n  presets: ['@babel/preset-env']\n});\n\nmodule.exports = require('./triangulator.js').default;","import _toConsumableArray from \"C:\\\\Users\\\\Jack W\\\\dev\\\\oss\\\\triangulator2-app\\\\node_modules\\\\.registry.npmjs.org\\\\@babel\\\\runtime\\\\7.4.3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n// triangulator2 - SVG triangle art generator\n// Copyright 2019 jackw01. Released under the MIT License (see LICENSE for details).\nimport seedrandom from 'seedrandom';\nimport Delaunator from 'delaunator';\nimport hash from 'object-hash';\nimport chroma from 'chroma-js';\nimport svgjs from 'svg.js';\nimport IterativePoissonDiscSampler from './poissondisc';\nimport PerlinNoise from './perlin'; // Utility stuff\n// Distance to closest edge of image, for x and y values normalized to (0, 1)\n\nfunction edgeDist(x, y) {\n  return Math.min(Math.min(x, 1 - x), Math.min(y, 1 - y)) * 2;\n}\n\nvar rng = Math.random;\nvar noiseGenerator = new PerlinNoise(rng); // triangulator2\n\nvar triangulator = {\n  pointCache: [],\n  lastPointOptionsHash: '',\n  GridMode: {\n    Square: 1,\n    Triangle: 2,\n    Poisson: 3,\n    Override: 4\n  },\n  // Must return a scalar from 0 to 1\n  ColorFunction: {\n    Horizontal: function Horizontal(x, y) {\n      return x;\n    },\n    Vertical: function Vertical(x, y) {\n      return y;\n    },\n    DiagonalFromLeft: function DiagonalFromLeft(x, y) {\n      return (x + y) / 2;\n    },\n    DiagonalFromRight: function DiagonalFromRight(x, y) {\n      return (1 - x + y) / 2;\n    },\n    RadialFromCenter: function RadialFromCenter(x, y) {\n      return Math.hypot(x - 0.5, y - 0.5) * Math.sqrt(2) * 1.1;\n    },\n    RadialFromBottom: function RadialFromBottom(x, y) {\n      return Math.hypot(x - 0.5, y - 1.5) - 0.5;\n    },\n    FromEdges: function FromEdges(x, y) {\n      return edgeDist(x, y) * 0.3 + (1 - Math.hypot(x - 0.5, y - 0.5) * Math.sqrt(2)) * 0.7;\n    },\n    Noise: function Noise(sx, sy) {\n      return function (x, y) {\n        return noiseGenerator.noise(x * sx, y * sy, 0);\n      };\n    }\n  },\n  // Must return a vector with x and y from 0 to 1 as an array and a direction value (-1 or 1)\n  GradientFunction: {\n    Random: function Random(triangle, x, y) {\n      var i = Math.floor(rng() * 3);\n      var p2 = triangle[(i + 1 + Math.floor(rng() * 2)) % 3];\n      var vector = [p2[0] - triangle[i][0], p2[1] - triangle[i][1]];\n      var vectorAbs = [Math.abs(vector[0]), Math.abs(vector[1])];\n      var max = Math.max.apply(Math, vectorAbs);\n      return {\n        gradientVector: [vectorAbs[0] / max, vectorAbs[1] / max],\n        gradientDirection: Math.sign(vector[0] * vector[1])\n      };\n    }\n  },\n  generate: function generate(input) {\n    var perfTest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console;\n    if (perfTest) c.time('total');\n    if (perfTest) c.time('setup');\n    var options = input || {\n      isBrowser: false,\n      svgInput: false,\n      forceSVGSize: true,\n      seed: Math.random(),\n      width: 1920,\n      height: 1080,\n      gridMode: this.GridMode.Poisson,\n      gridOverridde: false,\n      cellSize: 100,\n      cellRandomness: 0.3,\n      color: this.ColorFunction.DiagonalFromLeft,\n      colorScaleInvert: false,\n      colorPalette: ['#efee69', '#21313e'],\n      colorRandomness: 0.0,\n      quantizeSteps: 0,\n      colorOverride: false,\n      useGradient: false,\n      gradient: this.GradientFunction.Random,\n      gradientNegativeFactor: 0.03,\n      gradientPositiveFactor: 0.03,\n      strokeColor: false,\n      strokeWidth: false\n    }; // Non-global require is a bad practice but necessary here\n\n    var svg = options.isBrowser ? svgjs : svgjs(require('svgdom'));\n    var gridOverdraw = 100; // Set up RNG\n\n    rng = seedrandom(\"\".concat(options.seed));\n    noiseGenerator = new PerlinNoise(rng);\n    if (perfTest) c.timeEnd('setup');\n    if (perfTest) c.time('points'); // Generate points\n\n    var points = [];\n    var tris = [];\n    var pointOptionsHash = hash([options.seed, options.width, options.height, options.gridMode, options.gridOverride, options.cellSize, options.cellRandomness]);\n\n    if (pointOptionsHash !== this.lastPointOptionsHash) {\n      this.lastPointOptionsHash = pointOptionsHash;\n      var cellRandomnessLimit = options.cellRandomness * options.cellSize;\n\n      if (options.gridMode === triangulator.GridMode.Square) {\n        for (var y = -gridOverdraw; y < options.height + gridOverdraw + options.cellSize; y += options.cellSize) {\n          for (var x = -gridOverdraw; x < options.width + gridOverdraw + options.cellSize; x += options.cellSize) {\n            points.push([x + Math.floor(rng() * (2 * cellRandomnessLimit + 1)) - cellRandomnessLimit, y + Math.floor(rng() * (2 * cellRandomnessLimit + 1)) - cellRandomnessLimit]);\n          }\n        }\n      } else if (options.gridMode === triangulator.GridMode.Triangle) {\n        var r = 0;\n\n        for (var _x = -gridOverdraw; _x < options.width + gridOverdraw + options.cellSize; _x += options.cellSize) {\n          for (var _y = -gridOverdraw + options.cellSize / Math.sqrt(3) * (r % 2); _y < options.height + gridOverdraw + options.cellSize; _y += options.cellSize) {\n            points.push([_x + Math.floor(rng() * (2 * cellRandomnessLimit + 1)) - cellRandomnessLimit, _y + Math.floor(rng() * (2 * cellRandomnessLimit + 1)) - cellRandomnessLimit]);\n          }\n\n          r++;\n        }\n      } else if (options.gridMode === triangulator.GridMode.Poisson) {\n        var sample = IterativePoissonDiscSampler(1.5 * options.width, 1.5 * options.height, options.cellSize, rng);\n        var nextPoint = sample();\n\n        while (nextPoint) {\n          points.push([nextPoint[0] - 0.25 * options.width, nextPoint[1] - 0.25 * options.height]);\n          nextPoint = sample();\n        }\n      } else if (options.gridMode === triangulator.GridMode.Override) {\n        points.push.apply(points, _toConsumableArray(options.gridOverride));\n      } // Triangulate\n\n\n      var delaunay = Delaunator.from(points);\n\n      for (var i = 0; i < delaunay.triangles.length; i += 3) {\n        tris.push([points[delaunay.triangles[i]], points[delaunay.triangles[i + 1]], points[delaunay.triangles[i + 2]]]);\n      }\n\n      this.pointCache = tris;\n    } else {\n      tris = this.pointCache;\n    }\n\n    if (perfTest) c.timeEnd('points'); // Convert input colors to chroma.js scale\n\n    var scale = chroma.scale(options.colorPalette).mode('hcl'); // Create SVG context and draw\n\n    var draw = svg(options.svgInput);\n    if (options.forceSVGSize) draw.size(options.width, options.height); // Reset rng after drawing points\n\n    rng = seedrandom(\"\".concat(options.seed));\n    if (perfTest) c.time('draw');\n\n    for (var _i = 0; _i < tris.length; _i++) {\n      // Find where the triangle's centroid lies on the gradient\n      var normX = (tris[_i][0][0] + tris[_i][1][0] + tris[_i][2][0]) / 3 / options.width;\n      var normY = (tris[_i][0][1] + tris[_i][1][1] + tris[_i][2][1]) / 3 / options.height; // Get color/gradient for triangle\n\n      var color = void 0;\n\n      if (!options.colorOverride) {\n        (function () {\n          // Determine where the color lies on the scale - quantize if necessary\n          var colorIndex = options.color(normX, normY) + (rng() - 0.5) * options.colorRandomness;\n\n          if (options.quantizeSteps) {\n            colorIndex = Math.round(colorIndex * options.quantizeSteps) / (options.quantizeSteps - 1);\n          }\n\n          if (options.colorScaleInvert) colorIndex = 1 - colorIndex;\n\n          if (!options.useGradient) {\n            // Use solid color\n            color = scale(colorIndex).hex();\n          } else {\n            var _draw$gradient$from;\n\n            // Generate gradient vector and direction\n            var _options$gradient = options.gradient(tris[_i], normX, normY),\n                gradientVector = _options$gradient.gradientVector,\n                gradientDirection = _options$gradient.gradientDirection;\n\n            color = (_draw$gradient$from = draw.gradient('linear', function (stop) {\n              stop.at(0, scale(colorIndex - options.gradientNegativeFactor * gradientDirection).hex());\n              stop.at(1, scale(colorIndex + options.gradientPositiveFactor * gradientDirection).hex());\n            }).from(0.0, 0.0)).to.apply(_draw$gradient$from, _toConsumableArray(gradientVector));\n          }\n        })();\n      } else {\n        color = options.colorOverride(normX, normY);\n      }\n\n      draw.polygon(tris[_i].map(function (p) {\n        return p.join(',');\n      }).join(' ')).fill(color).stroke({\n        color: options.strokeColor || color,\n        width: options.strokeWidth || 1\n      });\n    }\n\n    if (perfTest) c.timeEnd('draw');\n    if (perfTest) c.timeEnd('total');\n    return draw.svg();\n  }\n};\nexport default triangulator;","// triangulator2-app\n// Copyright 2019 jackw01. Released under the MIT License (see LICENSE for details).\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Container, Row, Col, Form, FormGroup, Label, Input, ButtonGroup, Button } from 'reactstrap';\nimport { ChromePicker } from 'react-color';\nimport chroma from 'chroma-js';\nimport canvg from 'canvg';\nimport saveAs from 'file-saver';\nimport Triangulator from 'triangulator2';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svgNeedsUpdating: true,\n      svgSizeCSS: { width: '', height: '' },\n      svgWidth: 3840,\n      svgHeight: 2400,\n      svgString: '',\n      imageData: [],\n      imageWidth: 0,\n      imageHeight: 0,\n      options: {\n        isBrowser: true,\n        seed: 4,\n        width: 3840,\n        height: 2400,\n        gridMode: Triangulator.GridMode.Poisson,\n        gridOverride: false,\n        cellSize: 150,\n        cellRandomness: 0.2,\n        colorOverride: false,\n        color: Triangulator.ColorFunction.RadialFromBottom,\n        colorScaleInvert: false,\n        colorPalette: ['#e7a71d', '#dc433e', '#9e084b', '#41062f'],\n        colorRandomness: 0.15,\n        quantizeSteps: 0,\n        useGradient: true,\n        gradient: Triangulator.GradientFunction.Random,\n        gradientNegativeFactor: 0.03,\n        gradientPositiveFactor: 0.03,\n        strokeColor: false,\n        strokeWidth: 1,\n      },\n    };\n\n    this.allColorFunctions = [...Object.entries(Triangulator.ColorFunction).map(i => i[1])];\n    this.allGradientFunctions = [...Object.entries(Triangulator.GradientFunction).map(i => i[1])];\n\n    /*\n    this.imageColorOverride = (x, y) => {\n      if (this.state.imageData.length > 0) {\n        const x0 = x *\n        return `rgb(${}, ${}, ${})`;\n      } else {\n        return '#000000';\n      }\n    };*/\n\n    // Debounce input changes\n    this.inputHandler = _.debounce(this.handleOptionChange, 150).bind(this);\n\n    // Polyfill canvas.toBlob() used for saving images\n    // Not natively implemented on iOS\n    if (!HTMLCanvasElement.prototype.toBlob) {\n      Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n        value: (callback, type, quality) => {\n          const dataURL = this.toDataURL(type, quality).split(',')[1];\n          setTimeout(() => {\n            const binStr = atob(dataURL);\n            const len = binStr.length;\n            const arr = new Uint8Array(len);\n            for (let i = 0; i < len; i++) {\n              arr[i] = binStr.charCodeAt(i);\n            }\n            callback(new Blob([arr], { type: type || 'image/png' }));\n          });\n        },\n      });\n    }\n  }\n\n  // Remove css styles from svg string before saving\n  stripStyles(svgString) {\n    return svgString.replace(/style=\\\\?\".*?\\\\?\"/g, '');\n  }\n\n  // Handle input changes from non-text inputs\n  handleOptionChange(target) {\n    const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n\n    if (target.id === 'color') {\n      updatedState.options[target.id] = this.allColorFunctions[parseInt(target.value, 10)];\n    } else if (target.id === 'gradient') {\n      updatedState.options[target.id] = this.allGradientFunctions[parseInt(target.value, 10)];\n    } else if (target.step === 1) updatedState.options[target.id] = parseInt(target.value, 10);\n    else updatedState.options[target.id] = parseFloat(target.value);\n\n    // Enforce safe width\n    if (target.id === 'width' || target.id === 'height') {\n      console.log('yes')\n      updatedState.options[target.id] = Math.max(updatedState.options[target.id], 256);\n    }\n\n    this.setState(updatedState);\n  }\n\n  // Curried handler for toggle button inputs\n  handleToggle(value) {\n    return (event) => {\n      console.log(event.target);\n      const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n      updatedState.options[event.target.id] = value;\n      this.setState(updatedState);\n    };\n  }\n\n  // Curried handler for adding and removing color stops\n  handleChangeColorStops(delta) {\n    return () => {\n      const newSize = this.state.options.colorPalette.length + delta;\n      if (newSize > 0 && newSize <= 20) {\n        const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n        updatedState.options.colorPalette = chroma.scale(this.state.options.colorPalette)\n          .mode('lch').colors(newSize);\n        this.setState(updatedState);\n      }\n    };\n  }\n\n  // Curried handler for color inputs\n  handleColorChange(i) {\n    return (color) => {\n      console.log(color, i);\n      const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n      updatedState.options.colorPalette[i] = color.hex;\n      this.setState(updatedState);\n    };\n  }\n\n  // Handler for image file upload\n  handleFile(target) {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const sourceImage = new Image();\n      sourceImage.onload = () => {\n        // Draw image on canvas and extract data\n        const canvas = document.getElementById('imageProcessingCanvas');\n        canvas.width = sourceImage.width;\n        canvas.height = sourceImage.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        this.setState({\n          imageData: ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height).data,\n          imageWidth: sourceImage.width,\n          imageHeight: sourceImage.height,\n        });\n      };\n      sourceImage.src = event.target.result;\n    };\n    reader.readAsDataURL(target.files[0]);\n  }\n\n  // Render SVG\n  async generateSVG(element) {\n    const { svgNeedsUpdating, options } = this.state;\n    // TODO: sometimes element is null, iont know wtf is goin on here\n    if (svgNeedsUpdating && element) {\n      // If update flag is set, unset it before anything else\n      console.time('1');\n      await this.setState({ svgNeedsUpdating: false });\n      await this.setState({ svgWidth: options.width, svgHeight: options.height });\n\n      element.innerHTML = '';\n      const svgString = Triangulator.generate({\n        svgInput: element,\n        forceSVGSize: false,\n        ...options,\n      });\n\n      // Determine correct css sizing based on image and browser aspect ratios\n      const windowAspect = document.getElementById('image-container').clientWidth\n        / document.getElementById('root').clientHeight;\n      const svgSizeCSS = { width: '', height: '' };\n      if ((options.width / options.height) > windowAspect) svgSizeCSS.width = '100%';\n      else svgSizeCSS.height = '100vh';\n\n      await this.setState({ svgSizeCSS, svgString });\n      console.timeEnd('1');\n    }\n  }\n\n  // Render as image and download\n  saveImage() {\n    console.log(this.stripStyles(this.state.svgString));\n    canvg('canvas', this.stripStyles(this.state.svgString));\n    document.getElementById('canvas').toBlob((blob) => {\n      saveAs(blob, `tri2-${new Date().toISOString()}.png`);\n    });\n  }\n\n  // Download SVG data\n  saveSVG() {\n    const blob = new Blob([this.stripStyles(this.state.svgString)]);\n    saveAs(blob, `tri2-${new Date().toISOString()}.svg`);\n  }\n\n  render() {\n    return (\n      <Container className='main h-100'>\n        <Row className='h-100'>\n          <Col xs='8' lg='9' className='image-container' id='image-container'>\n            <svg\n              id='image'\n              style={this.state.svgSizeCSS}\n              viewBox={`0 0 ${this.state.svgWidth} ${this.state.svgHeight}`}\n              ref={this.generateSVG.bind(this)}\n            />\n          </Col>\n          <Col xs='4' lg='3' className='controls-container'>\n            <Form className='controls-form'>\n              <h1 className='header-light header-stylized-text'>triangulator2</h1>\n              <small>\n                © 2019 <a href='https://jackw01.github.io'>jackw01</a>. <a href='https://github.com/jackw01/triangulator2-app'>View on Github</a>\n              </small>\n              <hr />\n              <FormGroup className='spacer-top'>\n                <Label className='input-group-label' for='seed'>Seed:</Label>\n                <Input\n                  id='seed'\n                  className='w-100'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  defaultValue={this.state.options.seed}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='resolution'>Resolution:</Label>\n                <Input\n                  id='width'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  min='0'\n                  max='8192'\n                  defaultValue={this.state.options.width}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n                &nbsp;x&nbsp;\n                <Input\n                  id='height'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  min='0'\n                  max='8192'\n                  defaultValue={this.state.options.height}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='gridMode'>Grid Mode:</Label>\n                <Input\n                  id='gridMode'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={this.state.options.gridMode}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  <option value='1'>Square</option>\n                  <option value='2'>Triangle</option>\n                  <option value='3'>Poisson</option>\n                  <option value='4'>Override</option>\n                </Input>\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='cellSize'>Cell Size:</Label>\n                <input\n                  id='cellSize'\n                  type='range'\n                  step='1'\n                  min='80'\n                  max='512'\n                  defaultValue={this.state.options.cellSize}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className={this.state.options.gridMode === 3 ? 'hidden' : ''}>\n                <Label className='input-group-label' for='cellRandomness'>Cell Randomness:</Label>\n                <input\n                  id='cellRandomness'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='1'\n                  defaultValue={this.state.options.cellRandomness}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Label className='input-group-label' for='color'>Color Mode:</Label>\n                <Input\n                  id='color'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={5}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  {this.allColorFunctions.map((f, i) => (\n                    <option value={i}>{f.name}</option>\n                  ))}\n                </Input>\n                <ButtonGroup size='sm' className='spacer-top'>\n                  <Button\n                    id='colorScaleInvert'\n                    color='secondary'\n                    onClick={this.handleToggle(false).bind(this)}\n                    active={!this.state.options.colorScaleInvert}\n                  >\n                    Default\n                  </Button>\n                  <Button\n                    id='colorScaleInvert'\n                    color='secondary'\n                    onClick={this.handleToggle(true).bind(this)}\n                    active={this.state.options.colorScaleInvert}\n                  >\n                    Invert\n                  </Button>\n                </ButtonGroup>\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='colorRandomness'>Color Randomness:</Label>\n                <input\n                  id='colorRandomness'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='1'\n                  defaultValue={this.state.options.colorRandomness}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className='color-picker-container'>\n                <Label className='input-group-label' for='colorPalette'>Color Palette:</Label>\n                <Button\n                  id='colorPaletteDecrease'\n                  size='sm'\n                  color='secondary'\n                  onClick={this.handleChangeColorStops(-1).bind(this)}\n                >\n                  Remove Color\n                </Button>\n                &nbsp;\n                <Button\n                  id='colorPaletteIncrease'\n                  size='sm'\n                  color='secondary'\n                  onClick={this.handleChangeColorStops(1).bind(this)}\n                >\n                  Add Color\n                </Button>\n                {this.state.options.colorPalette.map((hex, i) => (\n                  <ChromePicker\n                    color={hex}\n                    disableAlpha\n                    onChangeComplete={this.handleColorChange(i).bind(this)}\n                  />\n                ))}\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='quantizeSteps'>Color Quantization Levels:</Label>\n                <input\n                  id='quantizeSteps'\n                  type='range'\n                  step='1'\n                  min='0'\n                  max='10'\n                  defaultValue={this.state.options.quantizeSteps}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Label className='input-group-label' for='useGradient'>Generate Gradients:</Label>\n                <ButtonGroup size='sm'>\n                  <Button\n                    id='useGradient'\n                    color='secondary'\n                    onClick={this.handleToggle(true).bind(this)}\n                    active={this.state.options.useGradient}\n                  >\n                    On\n                  </Button>\n                  <Button\n                    id='useGradient'\n                    color='secondary'\n                    onClick={this.handleToggle(false).bind(this)}\n                    active={!this.state.options.useGradient}\n                  >\n                    Off\n                  </Button>\n                </ButtonGroup>\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradient'>Gradient Mode:</Label>\n                <Input\n                  id='gradient'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={5}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  {this.allGradientFunctions.map((f, i) => (\n                    <option value={i}>{f.name}</option>\n                  ))}\n                </Input>\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradientNegativeFactor'>Gradient Negative Factor:</Label>\n                <input\n                  id='gradientNegativeFactor'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='0.1'\n                  defaultValue={this.state.options.gradientNegativeFactor}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradientPositiveFactor'>Gradient Positive Factor:</Label>\n                <input\n                  id='gradientPositiveFactor'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='0.1'\n                  defaultValue={this.state.options.gradientPositiveFactor}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup className='color-picker-container'>\n                <Button\n                  size='lg'\n                  color='primary'\n                  onClick={this.saveImage.bind(this)}\n                >\n                  Save Image\n                </Button>\n                <br />\n                <Button\n                  className='spacer-top'\n                  size='lg'\n                  color='secondary'\n                  onClick={this.saveSVG.bind(this)}\n                >\n                  Save SVG\n                </Button>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n        <canvas\n          id='imageProcessingCanvas'\n          className='hidden'\n        />\n        <canvas\n          id='canvas'\n          className='hidden'\n          width={this.state.svgWidth}\n          height={this.state.svgHeight}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n/*<FormGroup className='spacer-top'>\n  <Label className='input-group-label' for='image'>Image Input:</Label>\n  <Input\n    id='image'\n    className='w-100'\n    type='file'\n    onChange={e => this.handleFile(e.target)}\n  />\n</FormGroup>*/\n","// triangulator2-app\n// Copyright 2019 jackw01. Released under the MIT License (see LICENSE for details).\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}