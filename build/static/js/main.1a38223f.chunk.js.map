{"version":3,"sources":["../node_modules/.registry.npmjs.org/image-size/0.5.5/node_modules/image-size/lib/types sync /^/.*$","App.jsx","index.js"],"names":["map","./bmp","./bmp.js","./dds","./dds.js","./gif","./gif.js","./jpg","./jpg.js","./png","./png.js","./psd","./psd.js","./svg","./svg.js","./tiff","./tiff.js","./webp","./webp.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","svgNeedsUpdating","svgSizeCSS","width","height","svgWidth","svgHeight","svgString","imageData","imageWidth","imageHeight","options","isBrowser","seed","gridMode","Triangulator","GridMode","Poisson","gridOverride","cellSize","cellRandomness","colorOverride","color","ColorFunction","RadialFromBottom","colorScaleInvert","colorPalette","colorRandomness","quantizeSteps","useGradient","gradient","GradientFunction","Random","gradientNegativeFactor","gradientPositiveFactor","strokeColor","strokeWidth","strokeOnly","backgroundColor","allColorFunctions","toConsumableArray","entries","i","allGradientFunctions","inputHandler","_","debounce","handleOptionChange","bind","assertThisInitialized","HTMLCanvasElement","prototype","toBlob","defineProperty","value","callback","type","quality","dataURL","toDataURL","split","setTimeout","binStr","atob","len","length","arr","Uint8Array","charCodeAt","Blob","replace","target","updatedState","parseInt","step","parseFloat","console","log","Math","max","setState","_this2","event","delta","_this3","newSize","chroma","scale","mode","colors","_this4","hex","_this5","reader","FileReader","onload","sourceImage","Image","canvas","document","getElementById","ctx","getContext","drawImage","getImageData","data","src","result","readAsDataURL","files","element","time","innerHTML","generate","objectSpread","svgInput","forceSVGSize","windowAspect","clientWidth","clientHeight","timeEnd","stripStyles","canvg","blob","saveAs","concat","Date","toISOString","_this6","react_default","a","createElement","Container","className","Row","Col","xs","lg","style","viewBox","ref","generateSVG","Form","href","FormGroup","Label","for","Input","bsSize","defaultValue","onChange","min","f","name","ButtonGroup","size","Button","onClick","handleToggle","active","handleChangeColorStops","lib","disableAlpha","onChangeComplete","handleColorChange","handleBackgroundColorChange","saveImage","saveSVG","Component","ReactDOM","render","src_App"],"mappings":"6EAAA,IAAAA,EAAA,CACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,QAAA,IACAC,WAAA,IACAC,SAAA,IACAC,YAAA,IACAC,SAAA,IACAC,YAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAxB,EAAAoB,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAzB,EAAAoB,GAEAD,EAAAS,KAAA,WACA,OAAAC,OAAAD,KAAA5B,IAEAmB,EAAAW,QAAAR,EACAS,EAAAC,QAAAb,EACAA,EAAAE,GAAA,qeCmfeY,cA7gBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAJ,IACjBE,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAI,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACXC,kBAAkB,EAClBC,WAAY,CAAEC,MAAO,GAAIC,OAAQ,IACjCC,SAAU,KACVC,UAAW,KACXC,UAAW,GACXC,UAAW,GACXC,WAAY,EACZC,YAAa,EACbC,QAAS,CACPC,WAAW,EACXC,KAAM,EACNV,MAAO,KACPC,OAAQ,KACRU,SAAUC,IAAaC,SAASC,QAChCC,cAAc,EACdC,SAAU,IACVC,eAAgB,GAChBC,eAAe,EACfC,MAAOP,IAAaQ,cAAcC,iBAClCC,kBAAkB,EAClBC,aAAc,CAAC,UAAW,UAAW,UAAW,WAChDC,gBAAiB,IACjBC,cAAe,EACfC,aAAa,EACbC,SAAUf,IAAagB,iBAAiBC,OACxCC,uBAAwB,IACxBC,uBAAwB,IACxBC,aAAa,EACbC,YAAa,EACbC,YAAY,EACZC,gBAAiB,YAIrB5C,EAAK6C,kBAALnD,OAAAoD,EAAA,EAAApD,CAA6BA,OAAOqD,QAAQ1B,IAAaQ,eAAehE,IAAI,SAAAmF,GAAC,OAAIA,EAAE,MACnFhD,EAAKiD,qBAALvD,OAAAoD,EAAA,EAAApD,CAAgCA,OAAOqD,QAAQ1B,IAAagB,kBAAkBxE,IAAI,SAAAmF,GAAC,OAAIA,EAAE,MAazFhD,EAAKkD,aAAeC,IAAEC,SAASpD,EAAKqD,mBAAoB,KAAKC,KAAzC5D,OAAA6D,EAAA,EAAA7D,CAAAM,IAIfwD,kBAAkBC,UAAUC,QAC/BhE,OAAOiE,eAAeH,kBAAkBC,UAAW,SAAU,CAC3DG,MAAO,SAACC,EAAUC,EAAMC,GACtB,IAAMC,EAAUhE,EAAKiE,UAAUH,EAAMC,GAASG,MAAM,KAAK,GACzDC,WAAW,WAIT,IAHA,IAAMC,EAASC,KAAKL,GACdM,EAAMF,EAAOG,OACbC,EAAM,IAAIC,WAAWH,GAClBtB,EAAI,EAAGA,EAAIsB,EAAKtB,IACvBwB,EAAIxB,GAAKoB,EAAOM,WAAW1B,GAE7Ba,EAAS,IAAIc,KAAK,CAACH,GAAM,CAAEV,KAAMA,GAAQ,oBAlEhC9D,2EA0EPa,GACV,OAAOA,EAAU+D,QAAQ,qBAAsB,+CAI9BC,GACjB,IAAMC,EAAe,CAAEvE,kBAAkB,EAAMU,QAASf,KAAKI,MAAMW,SAEjD,UAAd4D,EAAO3F,GACT4F,EAAa7D,QAAQ4D,EAAO3F,IAAMgB,KAAK2C,kBAAkBkC,SAASF,EAAOjB,MAAO,KACzD,aAAdiB,EAAO3F,GAChB4F,EAAa7D,QAAQ4D,EAAO3F,IAAMgB,KAAK+C,qBAAqB8B,SAASF,EAAOjB,MAAO,KAC1D,IAAhBiB,EAAOG,KAAYF,EAAa7D,QAAQ4D,EAAO3F,IAAM6F,SAASF,EAAOjB,MAAO,IAClFkB,EAAa7D,QAAQ4D,EAAO3F,IAAM+F,WAAWJ,EAAOjB,OAGvC,UAAdiB,EAAO3F,IAAgC,WAAd2F,EAAO3F,KAClCgG,QAAQC,IAAI,OACZL,EAAa7D,QAAQ4D,EAAO3F,IAAMkG,KAAKC,IAAIP,EAAa7D,QAAQ4D,EAAO3F,IAAK,MAIzE4F,EAAa7D,QAAQ0B,aAAYmC,EAAa7D,QAAQyB,YAAc,GAEzExC,KAAKoF,SAASR,wCAIHlB,GAAO,IAAA2B,EAAArF,KAClB,OAAO,SAACsF,GACNN,QAAQC,IAAIK,EAAMX,QAClB,IAAMC,EAAe,CAAEvE,kBAAkB,EAAMU,QAASsE,EAAKjF,MAAMW,SACnE6D,EAAa7D,QAAQuE,EAAMX,OAAO3F,IAAM0E,EACxC2B,EAAKD,SAASR,mDAKKW,GAAO,IAAAC,EAAAxF,KAC5B,OAAO,WACL,IAAMyF,EAAUD,EAAKpF,MAAMW,QAAQe,aAAauC,OAASkB,EACzD,GAAIE,EAAU,GAAKA,GAAW,GAAI,CAChC,IAAMb,EAAe,CAAEvE,kBAAkB,EAAMU,QAASyE,EAAKpF,MAAMW,SACnE6D,EAAa7D,QAAQe,aAAe4D,IAAOC,MAAMH,EAAKpF,MAAMW,QAAQe,cACjE8D,KAAK,OAAOC,OAAOJ,GACtBD,EAAKJ,SAASR,+CAMF9B,GAAG,IAAAgD,EAAA9F,KACnB,OAAO,SAAC0B,GACNsD,QAAQC,IAAIvD,EAAOoB,GACnB,IAAM8B,EAAe,CAAEvE,kBAAkB,EAAMU,QAAS+E,EAAK1F,MAAMW,SACnE6D,EAAa7D,QAAQe,aAAagB,GAAKpB,EAAMqE,IAC7CD,EAAKV,SAASR,wDAKUlD,GAC1B,IAAMkD,EAAe,CAAEvE,kBAAkB,EAAMU,QAASf,KAAKI,MAAMW,SACnE6D,EAAa7D,QAAQ2B,gBAAkBhB,EAAMqE,IAC7C/F,KAAKoF,SAASR,sCAILD,GAAQ,IAAAqB,EAAAhG,KACXiG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACb,GACf,IAAMc,EAAc,IAAIC,MACxBD,EAAYD,OAAS,WAEnB,IAAMG,EAASC,SAASC,eAAe,yBACvCF,EAAO/F,MAAQ6F,EAAY7F,MAC3B+F,EAAO9F,OAAS4F,EAAY5F,OAC5B,IAAMiG,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAUP,EAAa,EAAG,EAAGE,EAAO/F,MAAO+F,EAAO9F,QACtDwF,EAAKZ,SAAS,CACZxE,UAAW6F,EAAIG,aAAa,EAAG,EAAGH,EAAIH,OAAO/F,MAAOkG,EAAIH,OAAO9F,QAAQqG,KACvEhG,WAAYuF,EAAY7F,MACxBO,YAAasF,EAAY5F,UAG7B4F,EAAYU,IAAMxB,EAAMX,OAAOoC,QAEjCd,EAAOe,cAAcrC,EAAOsC,MAAM,gFAIlBC,wFACsBlH,KAAKI,MAAnCC,qBAAkBU,aAEtBV,IAAoB6G,0BAEtBlC,QAAQmC,KAAK,cACPnH,KAAKoF,SAAS,CAAE/E,kBAAkB,2BAClCL,KAAKoF,SAAS,CAAE3E,SAAUM,EAAQR,MAAOG,UAAWK,EAAQP,uBAElE0G,EAAQE,UAAY,GACdzG,EAAYQ,IAAakG,SAAb7H,OAAA8H,EAAA,EAAA9H,CAAA,CAChB+H,SAAUL,EACVM,cAAc,GACXzG,IAIC0G,EAAelB,SAASC,eAAe,mBAAmBkB,YAC5DnB,SAASC,eAAe,QAAQmB,aAC9BrH,EAAa,CAAEC,MAAO,GAAIC,OAAQ,IACnCO,EAAQR,MAAQQ,EAAQP,OAAUiH,EAAcnH,EAAWC,MAAQ,OACnED,EAAWE,OAAS,kBAEnBR,KAAKoF,SAAS,CAAE9E,aAAYK,sBAClCqE,QAAQ4C,QAAQ,6IAMlB5C,QAAQC,IAAIjF,KAAK6H,YAAY7H,KAAKI,MAAMO,YACxCmH,IAAM,SAAU9H,KAAK6H,YAAY7H,KAAKI,MAAMO,YAC5C4F,SAASC,eAAe,UAAUhD,OAAO,SAACuE,GACxCC,IAAOD,EAAD,QAAAE,QAAe,IAAIC,MAAOC,cAA1B,6CAMR,IAAMJ,EAAO,IAAItD,KAAK,CAACzE,KAAK6H,YAAY7H,KAAKI,MAAMO,aACnDqH,IAAOD,EAAD,QAAAE,QAAe,IAAIC,MAAOC,cAA1B,0CAGC,IAAAC,EAAApI,KACP,OACEqI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAU,cACnBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKD,UAAU,SACbJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,kBAAkBzJ,GAAG,mBAChDqJ,EAAAC,EAAAC,cAAA,OACEvJ,GAAG,QACH8J,MAAO9I,KAAKI,MAAME,WAClByI,QAAO,OAAAd,OAASjI,KAAKI,MAAMK,SAApB,KAAAwH,OAAgCjI,KAAKI,MAAMM,WAClDsI,IAAKhJ,KAAKiJ,YAAY7F,KAAKpD,SAG/BqI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIJ,UAAU,sBAC3BJ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMT,UAAU,iBACdJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,qCAAd,iBACAJ,EAAAC,EAAAC,cAAA,0BACSF,EAAAC,EAAAC,cAAA,KAAGY,KAAK,6BAAR,WADT,KAC0Dd,EAAAC,EAAAC,cAAA,KAAGY,KAAK,gDAAR,mBAE1Dd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAU,cACnBJ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,QAAzC,SACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,OACHyJ,UAAU,QACVe,OAAO,KACP5F,KAAK,SACLkB,KAAK,IACL2E,aAAczJ,KAAKI,MAAMW,QAAQE,KACjCyI,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,cAAzC,eACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,QACHwK,OAAO,KACP5F,KAAK,SACLkB,KAAK,IACL6E,IAAI,IACJxE,IAAI,OACJsE,aAAczJ,KAAKI,MAAMW,QAAQR,MACjCmJ,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,WAVvC,YAaE0D,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,SACHwK,OAAO,KACP5F,KAAK,SACLkB,KAAK,IACL6E,IAAI,IACJxE,IAAI,OACJsE,aAAczJ,KAAKI,MAAMW,QAAQP,OACjCkJ,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,YAAzC,cACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,WACHwK,OAAO,KACP5F,KAAK,SACL6F,aAAczJ,KAAKI,MAAMW,QAAQG,SACjCwI,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKjF,mBAAmB/D,EAAEuF,UAEzC0D,EAAAC,EAAAC,cAAA,UAAQ7E,MAAM,KAAd,UACA2E,EAAAC,EAAAC,cAAA,UAAQ7E,MAAM,KAAd,YACA2E,EAAAC,EAAAC,cAAA,UAAQ7E,MAAM,KAAd,WACA2E,EAAAC,EAAAC,cAAA,UAAQ7E,MAAM,KAAd,cAGJ2E,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,YAAzC,cACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,WACH4E,KAAK,QACLkB,KAAK,IACL6E,IAAI,KACJxE,IAAI,MACJsE,aAAczJ,KAAKI,MAAMW,QAAQQ,SACjCmI,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAA2C,IAAhCzI,KAAKI,MAAMW,QAAQG,SAAiB,SAAW,IACnEmH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,kBAAzC,oBACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,iBACH4E,KAAK,QACLkB,KAAK,QACL6E,IAAI,IACJxE,IAAI,IACJsE,aAAczJ,KAAKI,MAAMW,QAAQS,eACjCkI,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,SAAzC,eACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,QACHwK,OAAO,KACP5F,KAAK,SACL6F,aAAc,EACdC,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKjF,mBAAmB/D,EAAEuF,UAExC3E,KAAK2C,kBAAkBhF,IAAI,SAACiM,EAAG9G,GAAJ,OAC1BuF,EAAAC,EAAAC,cAAA,UAAQ7E,MAAOZ,GAAI8G,EAAEC,SAGzBxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAaC,KAAK,KAAKtB,UAAU,cAC/BJ,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,mBACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAO9G,KAAKpD,MACvCmK,QAASnK,KAAKI,MAAMW,QAAQc,kBAJ9B,WAQAwG,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,mBACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAM9G,KAAKpD,MACtCmK,OAAQnK,KAAKI,MAAMW,QAAQc,kBAJ7B,YAUJwG,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,mBAAzC,qBACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,kBACH4E,KAAK,QACLkB,KAAK,QACL6E,IAAI,IACJxE,IAAI,IACJsE,aAAczJ,KAAKI,MAAMW,QAAQgB,gBACjC2H,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAU,0BACnBJ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,gBAAzC,kBACAjB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,uBACH+K,KAAK,KACLrI,MAAM,YACNuI,QAASjK,KAAKoK,wBAAwB,GAAGhH,KAAKpD,OAJhD,gBAFF,OAWEqI,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,uBACH+K,KAAK,KACLrI,MAAM,YACNuI,QAASjK,KAAKoK,uBAAuB,GAAGhH,KAAKpD,OAJ/C,aAQCA,KAAKI,MAAMW,QAAQe,aAAanE,IAAI,SAACoI,EAAKjD,GAAN,OACnCuF,EAAAC,EAAAC,cAAC8B,EAAA,aAAD,CACE3I,MAAOqE,EACPuE,cAAY,EACZC,iBAAkBnC,EAAKoC,kBAAkB1H,GAAGM,KAAKgF,QAIvDC,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,iBAAzC,8BACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,gBACH4E,KAAK,QACLkB,KAAK,IACL6E,IAAI,IACJxE,IAAI,KACJsE,aAAczJ,KAAKI,MAAMW,QAAQiB,cACjC0H,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,eAAzC,uBACAjB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAaC,KAAK,MAChB1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,cACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAM9G,KAAKpD,MACtCmK,OAAQnK,KAAKI,MAAMW,QAAQkB,aAJ7B,MAQAoG,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,cACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAO9G,KAAKpD,MACvCmK,QAASnK,KAAKI,MAAMW,QAAQkB,aAJ9B,SAUJoG,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAWzI,KAAKI,MAAMW,QAAQkB,YAAc,GAAK,UAC1DoG,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,YAAzC,kBACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvK,GAAG,WACHwK,OAAO,KACP5F,KAAK,SACL6F,aAAc,EACdC,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKjF,mBAAmB/D,EAAEuF,UAExC3E,KAAK+C,qBAAqBpF,IAAI,SAACiM,EAAG9G,GAAJ,OAC7BuF,EAAAC,EAAAC,cAAA,UAAQ7E,MAAOZ,GAAI8G,EAAEC,UAI3BxB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAWzI,KAAKI,MAAMW,QAAQkB,YAAc,GAAK,UAC1DoG,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,0BAAzC,6BACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,yBACH4E,KAAK,QACLkB,KAAK,QACL6E,IAAI,IACJxE,IAAI,MACJsE,aAAczJ,KAAKI,MAAMW,QAAQsB,uBACjCqH,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAWzI,KAAKI,MAAMW,QAAQkB,YAAc,GAAK,UAC1DoG,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,0BAAzC,6BACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,yBACH4E,KAAK,QACLkB,KAAK,QACL6E,IAAI,IACJxE,IAAI,MACJsE,aAAczJ,KAAKI,MAAMW,QAAQuB,uBACjCoH,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,cAAzC,qBACAjB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAaC,KAAK,MAChB1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,aACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAM9G,KAAKpD,MACtCmK,OAAQnK,KAAKI,MAAMW,QAAQ0B,YAJ7B,MAQA4F,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEhL,GAAG,aACH0C,MAAM,YACNuI,QAASjK,KAAKkK,cAAa,GAAO9G,KAAKpD,MACvCmK,QAASnK,KAAKI,MAAMW,QAAQ0B,YAJ9B,SAUJ4F,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAWzI,KAAKI,MAAMW,QAAQ0B,WAAa,GAAK,UACzD4F,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,eAAzC,iBACAjB,EAAAC,EAAAC,cAAA,SACEvJ,GAAG,cACH4E,KAAK,QACLkB,KAAK,QACL6E,IAAI,MACJxE,IAAI,KACJsE,aAAczJ,KAAKI,MAAMW,QAAQyB,YACjCkH,SAAU,SAAAtK,GAAC,OAAIgJ,EAAKpF,aAAa5D,EAAEuF,YAGvC0D,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWX,UAAWzI,KAAKI,MAAMW,QAAQ0B,WAAa,yBAA2B,UAC/E4F,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOZ,UAAU,oBAAoBa,IAAI,mBAAzC,qBACAjB,EAAAC,EAAAC,cAAC8B,EAAA,aAAD,CACE3I,MAAO1B,KAAKI,MAAMW,QAAQ2B,gBAC1B4H,cAAY,EACZC,iBAAkBvK,KAAKyK,4BAA4BrH,KAAKpD,SAG5DqI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACED,KAAK,KACLrI,MAAM,UACNuI,QAASjK,KAAK0K,UAAUtH,KAAKpD,OAH/B,cAOAqI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEvB,UAAU,aACVsB,KAAK,KACLrI,MAAM,YACNuI,QAASjK,KAAK2K,QAAQvH,KAAKpD,OAJ7B,gBAYRqI,EAAAC,EAAAC,cAAA,UACEvJ,GAAG,wBACHyJ,UAAU,WAEZJ,EAAAC,EAAAC,cAAA,UACEvJ,GAAG,SACHyJ,UAAU,SACVlI,MAAOP,KAAKI,MAAMK,SAClBD,OAAQR,KAAKI,MAAMM,oBAvgBXkK,aCJlBC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASxE,SAASC,eAAe","file":"static/js/main.1a38223f.chunk.js","sourcesContent":["var map = {\n\t\"./bmp\": 227,\n\t\"./bmp.js\": 227,\n\t\"./dds\": 228,\n\t\"./dds.js\": 228,\n\t\"./gif\": 229,\n\t\"./gif.js\": 229,\n\t\"./jpg\": 230,\n\t\"./jpg.js\": 230,\n\t\"./png\": 231,\n\t\"./png.js\": 231,\n\t\"./psd\": 232,\n\t\"./psd.js\": 232,\n\t\"./svg\": 233,\n\t\"./svg.js\": 233,\n\t\"./tiff\": 234,\n\t\"./tiff.js\": 234,\n\t\"./webp\": 235,\n\t\"./webp.js\": 235\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 226;","// triangulator2-app\n// Copyright 2019 jackw01. Released under the MIT License (see LICENSE for details).\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Container, Row, Col, Form, FormGroup, Label, Input, ButtonGroup, Button } from 'reactstrap';\nimport { ChromePicker } from 'react-color';\nimport chroma from 'chroma-js';\nimport canvg from 'canvg';\nimport saveAs from 'file-saver';\nimport Triangulator from 'triangulator2';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      svgNeedsUpdating: true,\n      svgSizeCSS: { width: '', height: '' },\n      svgWidth: 3840,\n      svgHeight: 2400,\n      svgString: '',\n      imageData: [],\n      imageWidth: 0,\n      imageHeight: 0,\n      options: {\n        isBrowser: true,\n        seed: 4,\n        width: 3840,\n        height: 2400,\n        gridMode: Triangulator.GridMode.Poisson,\n        gridOverride: false,\n        cellSize: 150,\n        cellRandomness: 0.2,\n        colorOverride: false,\n        color: Triangulator.ColorFunction.RadialFromBottom,\n        colorScaleInvert: false,\n        colorPalette: ['#e7a71d', '#dc433e', '#9e084b', '#41062f'],\n        colorRandomness: 0.15,\n        quantizeSteps: 0,\n        useGradient: true,\n        gradient: Triangulator.GradientFunction.Random,\n        gradientNegativeFactor: 0.03,\n        gradientPositiveFactor: 0.03,\n        strokeColor: false,\n        strokeWidth: 1,\n        strokeOnly: false,\n        backgroundColor: '#000000',\n      },\n    };\n\n    this.allColorFunctions = [...Object.entries(Triangulator.ColorFunction).map(i => i[1])];\n    this.allGradientFunctions = [...Object.entries(Triangulator.GradientFunction).map(i => i[1])];\n\n    /*\n    this.imageColorOverride = (x, y) => {\n      if (this.state.imageData.length > 0) {\n        const x0 = x *\n        return `rgb(${}, ${}, ${})`;\n      } else {\n        return '#000000';\n      }\n    };*/\n\n    // Debounce input changes\n    this.inputHandler = _.debounce(this.handleOptionChange, 150).bind(this);\n\n    // Polyfill canvas.toBlob() used for saving images\n    // Not natively implemented on iOS\n    if (!HTMLCanvasElement.prototype.toBlob) {\n      Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n        value: (callback, type, quality) => {\n          const dataURL = this.toDataURL(type, quality).split(',')[1];\n          setTimeout(() => {\n            const binStr = atob(dataURL);\n            const len = binStr.length;\n            const arr = new Uint8Array(len);\n            for (let i = 0; i < len; i++) {\n              arr[i] = binStr.charCodeAt(i);\n            }\n            callback(new Blob([arr], { type: type || 'image/png' }));\n          });\n        },\n      });\n    }\n  }\n\n  // Remove css styles from svg string before saving\n  stripStyles(svgString) {\n    return svgString.replace(/style=\\\\?\".*?\\\\?\"/g, '');\n  }\n\n  // Handle input changes from non-text inputs\n  handleOptionChange(target) {\n    const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n\n    if (target.id === 'color') {\n      updatedState.options[target.id] = this.allColorFunctions[parseInt(target.value, 10)];\n    } else if (target.id === 'gradient') {\n      updatedState.options[target.id] = this.allGradientFunctions[parseInt(target.value, 10)];\n    } else if (target.step === 1) updatedState.options[target.id] = parseInt(target.value, 10);\n    else updatedState.options[target.id] = parseFloat(target.value);\n\n    // Enforce safe width\n    if (target.id === 'width' || target.id === 'height') {\n      console.log('yes')\n      updatedState.options[target.id] = Math.max(updatedState.options[target.id], 256);\n    }\n\n    // Enforce stroke\n    if (!updatedState.options.strokeOnly) updatedState.options.strokeWidth = 1;\n\n    this.setState(updatedState);\n  }\n\n  // Curried handler for toggle button inputs\n  handleToggle(value) {\n    return (event) => {\n      console.log(event.target);\n      const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n      updatedState.options[event.target.id] = value;\n      this.setState(updatedState);\n    };\n  }\n\n  // Curried handler for adding and removing color stops\n  handleChangeColorStops(delta) {\n    return () => {\n      const newSize = this.state.options.colorPalette.length + delta;\n      if (newSize > 0 && newSize <= 20) {\n        const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n        updatedState.options.colorPalette = chroma.scale(this.state.options.colorPalette)\n          .mode('lch').colors(newSize);\n        this.setState(updatedState);\n      }\n    };\n  }\n\n  // Curried handler for color inputs\n  handleColorChange(i) {\n    return (color) => {\n      console.log(color, i);\n      const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n      updatedState.options.colorPalette[i] = color.hex;\n      this.setState(updatedState);\n    };\n  }\n\n  // Handler for BG color input\n  handleBackgroundColorChange(color) {\n    const updatedState = { svgNeedsUpdating: true, options: this.state.options };\n    updatedState.options.backgroundColor = color.hex;\n    this.setState(updatedState);\n  }\n\n  // Handler for image file upload\n  handleFile(target) {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const sourceImage = new Image();\n      sourceImage.onload = () => {\n        // Draw image on canvas and extract data\n        const canvas = document.getElementById('imageProcessingCanvas');\n        canvas.width = sourceImage.width;\n        canvas.height = sourceImage.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        this.setState({\n          imageData: ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height).data,\n          imageWidth: sourceImage.width,\n          imageHeight: sourceImage.height,\n        });\n      };\n      sourceImage.src = event.target.result;\n    };\n    reader.readAsDataURL(target.files[0]);\n  }\n\n  // Render SVG\n  async generateSVG(element) {\n    const { svgNeedsUpdating, options } = this.state;\n    // TODO: sometimes element is null, iont know wtf is goin on here\n    if (svgNeedsUpdating && element) {\n      // If update flag is set, unset it before anything else\n      console.time('1');\n      await this.setState({ svgNeedsUpdating: false });\n      await this.setState({ svgWidth: options.width, svgHeight: options.height });\n\n      element.innerHTML = '';\n      const svgString = Triangulator.generate({\n        svgInput: element,\n        forceSVGSize: false,\n        ...options,\n      });\n\n      // Determine correct css sizing based on image and browser aspect ratios\n      const windowAspect = document.getElementById('image-container').clientWidth\n        / document.getElementById('root').clientHeight;\n      const svgSizeCSS = { width: '', height: '' };\n      if ((options.width / options.height) > windowAspect) svgSizeCSS.width = '100%';\n      else svgSizeCSS.height = '100vh';\n\n      await this.setState({ svgSizeCSS, svgString });\n      console.timeEnd('1');\n    }\n  }\n\n  // Render as image and download\n  saveImage() {\n    console.log(this.stripStyles(this.state.svgString));\n    canvg('canvas', this.stripStyles(this.state.svgString));\n    document.getElementById('canvas').toBlob((blob) => {\n      saveAs(blob, `tri2-${new Date().toISOString()}.png`);\n    });\n  }\n\n  // Download SVG data\n  saveSVG() {\n    const blob = new Blob([this.stripStyles(this.state.svgString)]);\n    saveAs(blob, `tri2-${new Date().toISOString()}.svg`);\n  }\n\n  render() {\n    return (\n      <Container className='main h-100'>\n        <Row className='h-100'>\n          <Col xs='8' lg='9' className='image-container' id='image-container'>\n            <svg\n              id='image'\n              style={this.state.svgSizeCSS}\n              viewBox={`0 0 ${this.state.svgWidth} ${this.state.svgHeight}`}\n              ref={this.generateSVG.bind(this)}\n            />\n          </Col>\n          <Col xs='4' lg='3' className='controls-container'>\n            <Form className='controls-form'>\n              <h1 className='header-light header-stylized-text'>triangulator2</h1>\n              <small>\n                © 2019 <a href='https://jackw01.github.io'>jackw01</a>. <a href='https://github.com/jackw01/triangulator2-app'>View on Github</a>\n              </small>\n              <hr />\n              <FormGroup className='spacer-top'>\n                <Label className='input-group-label' for='seed'>Seed:</Label>\n                <Input\n                  id='seed'\n                  className='w-100'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  defaultValue={this.state.options.seed}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='resolution'>Resolution:</Label>\n                <Input\n                  id='width'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  min='0'\n                  max='8192'\n                  defaultValue={this.state.options.width}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n                &nbsp;x&nbsp;\n                <Input\n                  id='height'\n                  bsSize='sm'\n                  type='number'\n                  step='1'\n                  min='0'\n                  max='8192'\n                  defaultValue={this.state.options.height}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='gridMode'>Grid Mode:</Label>\n                <Input\n                  id='gridMode'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={this.state.options.gridMode}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  <option value='1'>Square</option>\n                  <option value='2'>Triangle</option>\n                  <option value='3'>Poisson</option>\n                  <option value='4'>Override</option>\n                </Input>\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='cellSize'>Cell Size:</Label>\n                <input\n                  id='cellSize'\n                  type='range'\n                  step='1'\n                  min='80'\n                  max='512'\n                  defaultValue={this.state.options.cellSize}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className={this.state.options.gridMode === 3 ? 'hidden' : ''}>\n                <Label className='input-group-label' for='cellRandomness'>Cell Randomness:</Label>\n                <input\n                  id='cellRandomness'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='1'\n                  defaultValue={this.state.options.cellRandomness}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Label className='input-group-label' for='color'>Color Mode:</Label>\n                <Input\n                  id='color'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={5}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  {this.allColorFunctions.map((f, i) => (\n                    <option value={i}>{f.name}</option>\n                  ))}\n                </Input>\n                <ButtonGroup size='sm' className='spacer-top'>\n                  <Button\n                    id='colorScaleInvert'\n                    color='secondary'\n                    onClick={this.handleToggle(false).bind(this)}\n                    active={!this.state.options.colorScaleInvert}\n                  >\n                    Default\n                  </Button>\n                  <Button\n                    id='colorScaleInvert'\n                    color='secondary'\n                    onClick={this.handleToggle(true).bind(this)}\n                    active={this.state.options.colorScaleInvert}\n                  >\n                    Invert\n                  </Button>\n                </ButtonGroup>\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='colorRandomness'>Color Randomness:</Label>\n                <input\n                  id='colorRandomness'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='1'\n                  defaultValue={this.state.options.colorRandomness}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className='color-picker-container'>\n                <Label className='input-group-label' for='colorPalette'>Color Palette:</Label>\n                <Button\n                  id='colorPaletteDecrease'\n                  size='sm'\n                  color='secondary'\n                  onClick={this.handleChangeColorStops(-1).bind(this)}\n                >\n                  Remove Color\n                </Button>\n                &nbsp;\n                <Button\n                  id='colorPaletteIncrease'\n                  size='sm'\n                  color='secondary'\n                  onClick={this.handleChangeColorStops(1).bind(this)}\n                >\n                  Add Color\n                </Button>\n                {this.state.options.colorPalette.map((hex, i) => (\n                  <ChromePicker\n                    color={hex}\n                    disableAlpha\n                    onChangeComplete={this.handleColorChange(i).bind(this)}\n                  />\n                ))}\n              </FormGroup>\n              <FormGroup>\n                <Label className='input-group-label' for='quantizeSteps'>Color Quantization Levels:</Label>\n                <input\n                  id='quantizeSteps'\n                  type='range'\n                  step='1'\n                  min='0'\n                  max='10'\n                  defaultValue={this.state.options.quantizeSteps}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Label className='input-group-label' for='useGradient'>Generate Gradients:</Label>\n                <ButtonGroup size='sm'>\n                  <Button\n                    id='useGradient'\n                    color='secondary'\n                    onClick={this.handleToggle(true).bind(this)}\n                    active={this.state.options.useGradient}\n                  >\n                    On\n                  </Button>\n                  <Button\n                    id='useGradient'\n                    color='secondary'\n                    onClick={this.handleToggle(false).bind(this)}\n                    active={!this.state.options.useGradient}\n                  >\n                    Off\n                  </Button>\n                </ButtonGroup>\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradient'>Gradient Mode:</Label>\n                <Input\n                  id='gradient'\n                  bsSize='sm'\n                  type='select'\n                  defaultValue={5}\n                  onChange={e => this.handleOptionChange(e.target)}\n                >\n                  {this.allGradientFunctions.map((f, i) => (\n                    <option value={i}>{f.name}</option>\n                  ))}\n                </Input>\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradientNegativeFactor'>Gradient Negative Factor:</Label>\n                <input\n                  id='gradientNegativeFactor'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='0.1'\n                  defaultValue={this.state.options.gradientNegativeFactor}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className={this.state.options.useGradient ? '' : 'hidden'}>\n                <Label className='input-group-label' for='gradientPositiveFactor'>Gradient Positive Factor:</Label>\n                <input\n                  id='gradientPositiveFactor'\n                  type='range'\n                  step='0.001'\n                  min='0'\n                  max='0.1'\n                  defaultValue={this.state.options.gradientPositiveFactor}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Label className='input-group-label' for='strokeOnly'>Stroke Only Mode:</Label>\n                <ButtonGroup size='sm'>\n                  <Button\n                    id='strokeOnly'\n                    color='secondary'\n                    onClick={this.handleToggle(true).bind(this)}\n                    active={this.state.options.strokeOnly}\n                  >\n                    On\n                  </Button>\n                  <Button\n                    id='strokeOnly'\n                    color='secondary'\n                    onClick={this.handleToggle(false).bind(this)}\n                    active={!this.state.options.strokeOnly}\n                  >\n                    Off\n                  </Button>\n                </ButtonGroup>\n              </FormGroup>\n              <FormGroup className={this.state.options.strokeOnly ? '' : 'hidden'}>\n                <Label className='input-group-label' for='strokeWidth'>Stroke Width:</Label>\n                <input\n                  id='strokeWidth'\n                  type='range'\n                  step='0.001'\n                  min='0.1'\n                  max='20'\n                  defaultValue={this.state.options.strokeWidth}\n                  onChange={e => this.inputHandler(e.target)}\n                />\n              </FormGroup>\n              <FormGroup className={this.state.options.strokeOnly ? 'color-picker-container' : 'hidden'}>\n                <Label className='input-group-label' for='backgroundColor'>Background Color:</Label>\n                <ChromePicker\n                  color={this.state.options.backgroundColor}\n                  disableAlpha\n                  onChangeComplete={this.handleBackgroundColorChange.bind(this)}\n                />\n              </FormGroup>\n              <hr />\n              <FormGroup>\n                <Button\n                  size='lg'\n                  color='primary'\n                  onClick={this.saveImage.bind(this)}\n                >\n                  Save Image\n                </Button>\n                <br />\n                <Button\n                  className='spacer-top'\n                  size='lg'\n                  color='secondary'\n                  onClick={this.saveSVG.bind(this)}\n                >\n                  Save SVG\n                </Button>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n        <canvas\n          id='imageProcessingCanvas'\n          className='hidden'\n        />\n        <canvas\n          id='canvas'\n          className='hidden'\n          width={this.state.svgWidth}\n          height={this.state.svgHeight}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n/*<FormGroup className='spacer-top'>\n  <Label className='input-group-label' for='image'>Image Input:</Label>\n  <Input\n    id='image'\n    className='w-100'\n    type='file'\n    onChange={e => this.handleFile(e.target)}\n  />\n</FormGroup>*/\n","// triangulator2-app\n// Copyright 2019 jackw01. Released under the MIT License (see LICENSE for details).\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}